.It \fB*** Arguments ***\fR
.It Ar game
the name of the game you wish to play. You better choose one. :-)
.El

Note: There are really many options. You can set the default options and / or
options per game in
.Nm xmames
config files see the RCFILES section below.
.Sh INSTALLING GAMES
Most game ROM images come in ZIP files.  Download the ZIP files for
the games you want, and move them to a directory of your choice (i.e. it is
a good idea to put them all in one dir).

Note: There is no need to unzip the games in a separate directory, because
.Nm xmame
has zip file support through zlib.

.Nm xmame
uses a ":" seperated rompath to find out which dirs to search for
roms/samples. The default rompath is XMAMEROOT as defined in the Makefile
during the compilation (normaly /usr/local/share/xmame). If you put all 
the zipped-ROM-Files in this dir everything will work automagicly.

The rompath will be overwritten by any rompath in xmamerc. Which can be
overwritten again with the -rompath commandline option.

.Nm xmame
searches every dir in this path for roms (and samples) in the following way:

.TS
tab (@);
l l.
<dir>/gamename.zip@(containing filename.ext)
<dir>/gamename/filename.ext
<dir>/gamename/filename.ext.gz@(containing filename.ext)
<dir>/gamename/filename.zip@(containing filename.ext)
.TE

Note: If your neogeo games can't find neogeo.rom put it in a dir called
neogeo somewhere in your rompath, or put it in neogeo.zip somewhere in
your rompath.
.Sh PLAYING GAMES
After running
.Nm xmame
i.e.
.Nm xmame
.Ar ladybug
you will see two screens.

The first with a copyright message (PLEASE READ THIS!). If you type (ok)
this screen will only come up again after the cfg-file of the game
(romname.cfg) will be deleted.

Another screen shows information about the game. Hit any key to continue.

Note: If you want to see this information screen again, you could press
\fI<TAB>\fR and select \fI<Game Information>\fR or hit \fI<ESC>\fR and
restart. ;-)

The game will then go through a `hardware self-test' (remember,
.Nm xmame
is emulating game HARDWARE). After the self-test, you are `in' the video game.
Feed the hungry machine with some coins (key \fI<5>\fR for one coin)
then start (key \fI<1>\fR) it. For more coins and player read the next section
(KEYBOARD COMMANDS).

HAVE A LOT OF FUN!
.Sh KEYBOARD COMMANDS
While playing a game, there are certain keyboard commands available for
you to use.

.TS
tab (@);
l l.
\fBKEY@Action\fR
<1> (the number `one')@Start a 1-player game.
<2> (the number `two')@Start a 2-player game.
<3> (the number `three')@Start a 3-player game.
<4> (the number `four')@Start a 4-player game.
<5> (the number `five')@Insert coin (slot 1).
<6> (the number `six')@Insert coin (slot 2).
<7> (the number `seven')@Insert coin (slot 3).
<8> (the number `eight')@Insert coin (slot 4).
<Tab>@Toggles the configuration menu.
<~> (Tilde)@Toggles the `On Screen Display'.
@Use the up and down arrow keys to select
@the parameter (global volume, mixing level,
@gamma correction etc.), left and right to
@modify.
<P>@Pauses the game.
<Shift+P>@While paused, walk to the next frame.
<F3>@Resets the game (start with
@`hardware self-test').
<F4>@Shows the game graphics. Use cursor keys
@to change set/color, F4 or Esc to return to
@the emulation.
<F9>@Changes frame skip on the fly.
<F10>@Toggles speed throttling.
<F11>@Toggles speed display.
<Shift+F11>@Toggles profiler display.
<F12>@Saves a screen snapshot. The default
@target directory is SNAP. You must create
@this directory yourself; the program will
@not create it if it doesn't exist.
<ESC>@Exits the emulator.
<L-CTRL>@is mostly used as a button.
<L-ALT>)@is also mostly used as a button.
<arrows>@will emulate the joystick, pad or
@trakball. If you have a joystick (pad,
@trakball ), you can use it with the
@Input-Related options: -joytype, -jt 
@and/or -[no]analogstick, -[no]as
.TE

For a complete list of the usefull keys in
.Nm xmame
start a game, press the \fI<tab>\fR button, select \fI<Input (general)>\fR or
\fI<Input (this game)>\fR and you see a complete list of the related keys.
.Sh RCFILES
You can put the most commandline options in an (r)essource (c)onfiguration
(rc) file. To generate a `clean' xmamerc you type in your ${HOME}/.xmame
directory:

.Nm xmame
.Fl sc
>
.Ar xmamerc

Now you have a good base to build your specific rc-file. Here is a piece
from this file to tell you how the syntax works.

    ### X11-window Related ###
    cursor                  1
    mitshm                  1
    xsync                   1
    privatecmap             0
    xil                     1
    mtxil                   0
    run-in-root-window      0
    root_window_id          0
    geometry                640x480

    ### XFree86 DGA Related ###

    ### Video Mode Selection Related ###
    keepaspect              1
    displayaspectratio      1.330000

The number `0' is equal to `no' or `false' and `1' means `yes' or `true'.

Some parameters like `geometry' needs a string `800x600' and
some others like `displayaspectratio' use a number `1.330000'.
.Sh ENVIRONMENT
The following environment variables are used:

.TS
tab (@);
l l.
\fBENV@USE\fR
HOME@The user's home directory.  (normally set by the login process.)
DISPLAY@X server to display in.
.TE
.Sh FILES
The config files are parsed in the following order:

.TS
tab (@);
l l.
\fBPATH@CONFIG FILE\fR
/usr/local/share/xmame/xmamerc@global configuration
${HOME}/.xmame/xmamerc@user configuration
/usr/local/share/xmame/xmame-x11rc@global per display
@method
${HOME}/.xmame/xmame-x11rc@user per display
@method
/usr/local/share/xmame/rc/<game>rc@global per game
${HOME}/.xmame/rc/<game>rc@user per game
.TE
.Sh BUGS
There might be some bugs. Take a look in the doc-dir for more info,
because the xmame-project is always in progress. :-)
.Sh CREDITS
Lots and lots and lots of thank to everyone for there great help on the
xmame project. I would like to thank the following people and of course anyone
I've forgotten.

Thank you all,

Hans

  1. Fathers of the mame-creature (main version)
        Nicola Salmoria
        Allard van der Bas
        Mirko (Mix) Buffoni (General Mantainer)
  2. Fathers of mess
        Brad Oliver
        Richard Bannister
        Ben Bruscella (current coordinator)
  3. Original UNIX/X11 port
        Allard van der Bas
        Dick the Ridder
        Juan Antonio Marmnez
  4. Unix maintainer
        Hans de Goede
  5. Alpha specific issues
        Christian Groessler
  6. Sun specific issues
        Keith Hargrove
        Mathis Rosenhau
  7. Irix specific issues
        Tristram Scott
  8. GGI maintainance
        Gabriele Boccone (original port)
        Christian Groessler (current maintainer)
  9. OpenGL code & maintainance
        Mike Oliphant
 10. Network code
        Eric Totel
 11. Perl scripts for automation of some porting issues
        Bill Adams
 12. Xmame rpms
        Jeremy Hansen
 13. Mailing list maintainer
        Chris McCraw
 14. Bits and pieces
        Christian Groessler
        Torsten Paul
 15. AIX Sound code
        Chris Sharpp
 16. IRIX Sound code
        entropy@zippy.bernstein.com
 17. German readme
        Robert Hamberger
 18. Documentation (SGML, HTML, MAN ...)
        Rene Herrmann

    And now you've come to the end of this man(ual).
    Have a lot of fun
    Rene'
